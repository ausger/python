# -*- coding: utf-8 -*-
import sys
import csv
import codecs
import openpyxl as px
import json
_author_ = 'leoshang'


class GenerateProduct:

    XLS_INPUT_FILE_NAME = "/Users/leishang/helenstreet/python/mageproductcsv/resources/wmf-sandwich-baker.xlsx"
    XLS_SHEET_NAME = "Sheet1"
    CSV_OUTPUT_FILE_NAME = "/Users/leishang/helenstreet/python/mageproductcsv/output/wmf-sandwich-baker_complete.csv"
    store='base'
    age=''
    brand = "WMF"
    attribute_set='Electric'
    categories='[Chinese Category]/家用小电器/多士炉'
    country_of_manu='Germany'
    featured='No'
    UTF_8_ENCODING='utf-8'
    product_type='simple'
    product_websites='base'
    image_label=''
    small_image_label=''
    thumbnail_label=''
    media_image=''
    media_gallery=''
    special_price=''
    visibility='4'
    weight='1'
    quantity='10'
    is_in_stock='1'
    TAX_CLASS_ID='2'
    STATUS='1'
    USE_CONFIG='Use config'
    PRODUCT_INFO_COLUMN='Product Info Column'
    size=''

    def generate(self):
        # the first row of the csv input file must be the csv head name
        # filename = sys.argv[1]
        # print "file name " + filename
        outputfile = file(self.CSV_OUTPUT_FILE_NAME, 'w')
        writer = csv.writer(outputfile)

        workbook = px.load_workbook(GenerateProduct.XLS_INPUT_FILE_NAME, use_iterators=True)
        worksheet = workbook.get_sheet_by_name(GenerateProduct.XLS_SHEET_NAME)

        # write column name into the csv output file.
        writer.writerow(('sku', '_store', '_attribute_set','_type','categories','_product_websites','age_range','aptamil_code','bottle_volume',
             'brand','carseat_color','cartoon_figures','color','cost','country_of_manufacture','created_at','custom_design',
             'custom_design_from','custom_design_to','custom_layout_update','description','featured','gallery',
             'gift_message_available','has_options','image','image_label','manufacturer','material','media_gallery',
             'meta_description','meta_keyword','meta_title','minimal_price','msrp','msrp_display_actual_price_type',
             'msrp_enabled','name','news_from_date','news_to_date','options_container','page_layout','price',
             'required_options','short_description','sigg_figure','size','small_image','small_image_label','special_from_date',
             'special_price','special_to_date','status','tax_class_id','thumbnail','thumbnail_label','updated_at','url_key',
             'url_path','visibility','weight','qty','min_qty','use_config_min_qty','is_qty_decimal','backorders',
             'use_config_backorders','min_sale_qty','use_config_min_sale_qty','max_sale_qty','use_config_max_sale_qty',
             'is_in_stock','notify_stock_qty','use_config_notify_stock_qty','manage_stock','use_config_manage_stock',
             'stock_status_changed_auto','use_config_qty_increments','qty_increments','use_config_enable_qty_inc',
             'enable_qty_increments','is_decimal_divided','_links_related_sku','_links_related_position','_links_crosssell_sku',
             '_links_crosssell_position','_links_upsell_sku','_links_upsell_position','_associated_sku',
             '_associated_default_qty','_associated_position','_tier_price_website','_tier_price_customer_group','_tier_price_qty',
             '_tier_price_price','_group_price_website','_group_price_customer_group','_group_price_price','_media_attribute_id',
             '_media_image','_media_lable','_media_position','_media_is_disabled'))

        for row in worksheet.iter_rows(row_offset=1):
            sku_value = ''
            a = []
            # check out the last row
            for index, cell in enumerate(row):
                if cell.value is None:
                    cell.value = 0
                print index
                #if isinstance(cell.value, float):
                if index == 2:
                    print cell.value
                    a.append(cell.value)
                else:
                    print u''.join(cell.value).encode('utf-8').strip()
                    a.append(u''.join(cell.value).encode('utf-8').strip())
                    #   0           1         2       3         4            5                 6                  7                 8        9    10     11   12
                    #category	description	price	name	meta_title	meta_keywords	meta_description	short_description	img-cover	img	brand	sku	url-key
            if '<img />' != a[9]:
                description_tmp = a[1] + a[9]
            else:
                description_tmp = a[1]
            writer.writerow((a[11], self.store, self.attribute_set, self.product_type, self.categories, self.product_websites, self.age,'','',
                        a[10],'','','','',self.country_of_manu,'','',
                        '','','',description_tmp,self.featured,'',
                        '','0',a[8],self.image_label,'','',self.media_gallery,
                        a[6],a[5],a[4],'','',self.USE_CONFIG,
                        self.USE_CONFIG,a[3],'','',self.PRODUCT_INFO_COLUMN,'',a[2],
                        '0',a[7],'',self.size,a[8],self.small_image_label,'',
                        self.special_price,'',self.STATUS,self.TAX_CLASS_ID,a[8],self.thumbnail_label,'',a[12],
                        a[12]+'.html',self.visibility,self.weight,self.quantity,'0','1','0','0',
                        '1','1','1','0','1',
                        self.is_in_stock,'','1','0','1',
                        '0','1','0','1',
                        '0','0','','','',
                        '','','','',
                        '','','','','',
                        '','','','','',
                        self.media_image,'','1','0'))

        #              #  0      1         2        3     4     5        6           7              8                  9          10    11        12      13  14       15
        #              # sku,category,description,price,name,url_key,meta_title,meta_keywords,meta_description,short_description,img,small_img,thumbnail,age,brand,attribute_set

GenerateProduct().generate()
